#!/bin/sh

# Add lock file
exec 100>/var/tmp/mgwp_monitor.lock || exit 1
flock -n 100 || exit 1


LOG_FILE="/root/mgwp_monitor_log.txt"
LINES_MAX=11000
LINES_MIN=6000
LINES_COUNT=$(wc -l $LOG_FILE | awk '{print $1}')

# if the log files gets huge, strip it, keep last LINES_MIN lines
if [[ "$LINES_COUNT" -ge "$LINES_MAX" ]]; then
   echo "$(tail -$LINES_MIN $LOG_FILE)" > $LOG_FILE
fi

# Check if there is 2 mgwp processes running
MGWP_PROCESSES=$(pgrep -f "python /usr/lib/python3.9/site-packages/mgwp/mgwp.pyc")
PROCESS_CNT=$(echo $MGWP_PROCESSES | awk '{ print NF}')

echo "$(date): Process = $MGWP_PROCESSES, CNT = $PROCESS_CNT " >> $LOG_FILE

if [[ "$PROCESS_CNT" -ge 2 ]]; then
  #echo "$(date): $PROCESS_CNT python_mgwp processes are running, kill the latest one" >> $LOG_FILE
  PID=$(echo $MGWP_PROCESSES | awk '{ print $2}')
  PID_UTIME=$(cat /proc/$PID/stat | awk '{ print $14}')

  echo "$(date): PID=$PID, utime=$PID_UTIME " >> $LOG_FILE

  # check if utime (14) > 100, then kill, check PROC(5)  
  if [[ "$PID_UTIME" -ge 1000 ]]; then
    echo "$(date): Killing $PID, has utime = $PID_UTIME" >> $LOG_FILE
    kill $PID
  fi
fi

#start Homeon-HZG
#HZG_PROCESS=$(pgrep homeon-hzg)
#HZG_PROCESS_CNT=$(echo $HZG_PROCESS | awk '{ print NF}')
#if [[ "$HZG_PROCESS_CNT" -eq 0 ]]; then
#  /etc/init.d/homeon-hzg start
#fi

#Run MGWP_APP if the process crash
MGWP_APP_PID=$(pgrep -f /usr/bin/mgwp_app)
MGWP_APP_PID_CNT=$(echo $MGWP_APP_PID | awk '{ print NF}')

if [[ "$MGWP_APP_PID_CNT" -eq 0 ]]; then
   logger "mgwp_monitor: starting mgw_app"
    /usr/bin/mgwp_app &
elif [[ "$MGWP_APP_PID_CNT" -gt 1 ]]; then
   i=0
   for pid in $MGWP_APP_PID
   do
	i=$((i+1))
	if [[ "$i" -ge 2 ]]; then 
		kill -9 $pid
		logger "mgwp_monitor: killing the process:$pid"
	else 	
	    logger "mgwp_monitor: keep the process:$pid"
	fi
   done
else 
	logger "mgwp_monitor: nop:$MGWP_APP_PID_CNT"
fi


#start MGW STREAMING
#MGWS_TASK_PROCESS_CNT=$(ps | grep mgwp_streaming_task | wc -l)
#if [[ "$MGWS_TASK_PROCESS_CNT" -eq 1 ]]; then
#  /usr/bin/mgwp_streaming_task &
#fi

# Check if the microsd is mount as RO
if [[ $(grep "[[:space:]]ro[[:space:],]" /proc/mounts | grep mmcblk0p1 | wc -l) -ge 1 ]]; then
  echo "$(date): microSD is mounted as RO, fix error and re-mount as RW" >> $LOG_FILE

  # Kill all python process and scan microsd, then reboot
  killall python
  umount /mnt/mmcblk0p1/
  rm -fr /mnt/mmcblk0p1/
  ln -ns /mnt/mmcblk0p1/ /tmp

  fsck.fat -w -a -t /dev/mmcblk0p1

  killall python
  rm -fr /mnt/mmcblk0p1/
  reboot
  
  mount -o rw /dev/mmcblk0p1 /mnt/mmcblk0p1/
fi

rm /var/tmp/mgwp_monitor.lock